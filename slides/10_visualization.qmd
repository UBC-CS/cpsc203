---
date: 2024-01-01
pyodide:
  - pandas
  - matplotlib
  - datetime
---

## Announcements

# Slides from the assigned videos

##  {background-iframe="https://player.vimeo.com/video/908493751" data-menu-title="Dates"}

## Warm-up Puzzle: What's the date of last saturday?

``` python
import datetime as dt
today = dt.date.today()
today.weekday() # <1>
dayspostsat =
```

1.  Gives the day of the week

\

| Sat | Sun | Mon | Tue | Wed | Thu | Fri |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
|  5  |  6  |  0  |  1  |  2  |  3  |  4  |

::: notes
Use modular arithmetic.
:::

## Pandas and data frames

`import pandas`

Imports the pandas library.
We will almost always use an abbreviation...

Instead of saying `pandas.read_csv('file.csv')`

we can say

This function returns a DataFrame containing the data from `file.csv`.

## CSV files

To implement: `df = pd.read_csv('file.csv')`

`file.csv` must have field names in row 1, and data beginning in row 2.

``` {.default filename="bill_week.csv"}
,week,title,artist,rank,last_week,peak_pos,weeks_on_chart
0,2019-09-21,Truth Hurts,Lizzo,1,1,1,19
1,2019-09-21,Senorita,Shawn Mendes & Camila Cabello,2,2,1,12
2,2019-09-21,Goodbyes,Post Malone Featuring Young Thug,3,10,3,10
3,2019-09-21,Circles,Post Malone,4,7,4,2
4,2019-09-21,Bad Guy,Billie Eilish,5,3,1,24
5,2019-09-21,Ran$om,Lil Tecca,6,4,4,15
6,2019-09-21,No Guidance,Chris Brown Featuring Drake,7,6,6,14
```

##  {background-iframe="https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf" background-interactive="true" data-menu-title="pandas cheat sheet"}

## Selecting rows {.smaller}

::::: columns
::: {.column width="40%"}
![](/images/pandas-subset-rows.png){fig-alt="pandas cheat sheet section on selecting rows in Pandas DataFrames."}
:::

::: {.column width="60%"}
-   `df.nlargest(10,'last_week')`

    Returns top 10 hits from last week.

\

-   `df[ df['weeks_on_chart'] > 10 ]`

    Returns all songs that have been on the charts for more than 10 weeks.
:::
:::::

## Adding a column {.smaller}

-   `df['gradient'] = df['last_week'] - df['rank']`

    Adds a column to the DataFrame containing the difference for every row.

\

-   `df[ df['gradient'] > 10 ]`

    Returns all songs that have moved more than 10 spaces in the last week.

## Some challenges...

Given last week's chart:

1.  How many new songs were there?

2.  What's the average peak?

3.  Among those who were on the list for more than 10wk, what's the average peak?
    (Is it very different than the previous answer?)

4.  Which song changed the most?
    Was it rising or falling?

5.  Write and answer your own question:

    [\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_]{.underline}

::: notes
``` python
df2 = pd.read_csv('bill_week.csv')
df3 = df2[ df2['weeks_on_chart'] > 10 ]
print("all:  ")
print(df2)
print("endurance:  ")
print(df3)

df4 = df2[ df2['last_week'] == 101].count()['title']
df5 = df3['peak_pos'].mean()
print("new count")
print(df4)
print("peak avg")
print(df5)
```
:::

##  {background-iframe="https://player.vimeo.com/video/908496448" data-menu-title="Dataframe filtering"}

## Some challenges...

::::: columns
::: {.column width="50%"}
How many new songs were there?
:::

::: {.column width="50%"}
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
|----|----|----|----|----|----|
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
:::
:::::

::: notes
Filter, apply function, think about output (sometimes means choosing columns, too)

``` python
df[df['last_week'] == 101][['title', 'artist', 'weeks_on_chart']] .count()[â€˜title']
```
:::

## Some challenges...

::::: columns
::: {.column width="50%"}
What's the average peak?
:::

::: {.column width="50%"}
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
|----|----|----|----|----|----|
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
:::
:::::

::: notes
``` python
df5 = df3['peak_pos'].mean()
```
:::

## Some challenges...

::::: columns
::: {.column width="50%"}
Among those who were on the list for more than 10wk, what's the average peak?
(Is it very different than the previous answer?)
:::

::: {.column width="50%"}
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
|----|----|----|----|----|----|
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
:::
:::::

::: notes
``` python
enduring_peak = df[df['weeks_on_chart']>=10]['peak_pos'].mean()
print("enduring avg peak: " + str(enduring_peak))
```
:::

## Some challenges...

::::: columns
::: {.column width="50%"}
Which song moved the most?
Did it rise or fall?
:::

::: {.column width="50%"}
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
|----|----|----|----|----|----|
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
| [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} | [C]{.text-hidden} |
:::
:::::

::: notes
``` python
df['gradient'] = df['rank'] - df['last_week']
print(df.loc[df['gradient'].abs().idxmax()])
```
:::

## The Plot Thickens...

::: notes
Sketch Cartesian coordinate system.
:::

## Plotting with Pandas

::: notes
:::

## Resources

<https://pymotw.com/2/datetime/>

<https://www.dataschool.io/best-python-pandas-resources/>

<https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf>

<https://queirozf.com/entries/pandas-dataframe-plot-examples-with-matplotlib-pyplot>

# Pandas and plotting demo
