---
date: 2025-09-04
---

# Introductions

## About me

## Our amazing TAs

## You? {.smaller}

* Turn to your neighbor and introduce yourself üëã  
* Together, come up with **one binary question**  
  that you think will divide the class **about in half**  

Examples:  
* Coke or Pepsi?  
* Spaghetti or Sushi?  
* Morning person or Night owl?  

## The Flashlight Game üî¶ {.smaller}

**Rules:**

* Everyone starts **in play**  
* Each turn, a student poses a _valid_ yes/no question  
  + **YES** = turn on your phone flashlight  
  + **NO** = keep it dark  
* **YES** people are now on vacation üå¥  
  (light stays off from now on ‚Äî relax and enjoy!)  

A question is _valid_ if it puts **at least 5** and 
**no more than half of the current group** on vacation.

End of Game:
* We stop when **10 or fewer people** remain in play
* Everyone else is happily **on vacation** üå¥  

::: notes
## How to Count

- I only need to count the lights (YES)  
- The rest (dark screens) = NO  
- Eliminated = never light up again  

Start w 150 (say)
pose question 1, 5 <= k1 <= 150/2 lights -> 150-k1 remain. pose 2, 5 <= k2 lights <= (150-k1)/2 -> 150-k1-k2 remain. pose question 3, 5 <= k3 <= (150-k1-k2)/2 -> 150-k1-k2-k3 remain. etc. 
:::

## Debrief üí°

Punchline questions:  

1. We know we will need at least ${\hline{12em}}$ questions.

2. We know we will need no more than ${\hline{12em}}$ questions.

3. Why did we stop at 10 instead of 1?  

4. Why did we do this?


::: notes
- Best case: keep halving ‚áí about **log‚ÇÇ(150/10) ‚âà 4 rounds**  
- Worst case: only 5 eliminated each round ‚áí ~28 rounds  
- Stopping at 10 = ‚Äúsmall enough to brute force‚Äù  
  ‚Üí common strategy in algorithms  
:::

## Where to start? {.center}

Course Website: <https://ubc-cs.github.io/cpsc203/>
Canvas: <https://canvas.ubc.ca/courses/170624>

##  {background-image="/images/how-learning-works.png" background-size="contain" data-menu-title="Elements of mastery"}

::: sr-only
The stages of skill mastery: acquiring skills, practicing and integrating skills, and knowing when to apply skills.
:::

##  {background-iframe="https://ubc-cs.github.io/cpsc203/" background-interactive="true" data-menu-title="Course Website"}

## About This Course

This course will teach you a bajillion different things!

-   Tools: Terminal, Markdown, Git, Visual Studio Code, PrairieLearn
-   Computer science: Python (!!!), efficiency, web scraping, graphs
-   Data science: pandas, data frames, visualizations
-   Algorithms: many algorithms!
-   Art and creativity: lots of examples!

## Course Designer ‚Äì Dr. Cinda Heeren!

::::: columns
::: {.column width="60%"}
-   Teaching Professor, at UBC since 2017 (previously at University of Illinois Urbana-Champaign).

-   Teaches mid-level required courses for CS specializations (mostly CPSC 221) & a similar course for non-majors!
:::

::: {.column width="40%"}
![](/images/cinda-heeren.jpg){fig-alt="Course designer Dr. Cinda Heeren"}
:::
:::::

## Course Components

**Lectures:** in-class activities based on problem solving and design.

**Labs:** practice on lecture material

**Problems of the day (POTD):** one per (week)day, 5/week, \~ 50 / term

**Projects:** 3 total

**Assessments:** 5 tests (examlets) + final

## Passing Requirements

You must satisfy **ALL** conditions to pass the course:

1.  Earn a grade of at least 50% in the Lab component.
2.  Achieve a minimum grade of 50% in both the Test and Exam components combined.
3.  Pass the Final Exam with a minimum grade of 50%.

If students do not satisfy the appropriate requirements, the student will be assigned the **lower** of their earned course grade or a maximum overall grade of 45 in the course.

## Evaluation

::: small-font-size
| Item                 | Weight          | Due date(s)       |
|----------------------|-----------------|-------------------|
| Problems of the Week | 10% (10 x 1%)   | Fridays at 6 PM   |
| Labs                 | 5% (10 x 0.5%)  | Fridays at 6 PM   |
| Programming Projects | 10% (2 x 5%)    | Three in the term |
| Tests (Examlets)     | 50% (5 x 10%)   | \~ Bi-weekly      |
| Final Exam           | 25%             | TBD               |

: Course grading scheme: There will be 5 tests in this course in an (approximately) bi-weekly schedule.
:::

## Semester overview {.smaller}

+-----------+-------------------+-------------------------------+------------------------------+-----------------------+----------------------------+
| Handcraft | Billboard Hot 100 | The Overstory and Pointillism | Artificial Music Composition | Road Trip Planning    | Spiderman's Social Network |
+===========+===================+===============================+==============================+=======================+============================+
| Design    | Web Scraping      | Voronoi Diagrams              | Markov Chains                | Traveling Salesperson | Natural Language           |
|           |                   |                               |                              |                       |                            |
| Objects   | Data Frames       | Efficiency                    | Random Numbers               | Intractable Problems  |                            |
|           |                   |                               |                              |                       |                            |
| Iteration | MatPlotLib        |                               | Graphs                       |                       |                            |
+-----------+-------------------+-------------------------------+------------------------------+-----------------------+----------------------------+

This course consists of a sequence of six explorations, assembled to provide a tour through data structure applications and algorithmic design.
Built around topics from arts, sciences, and technology, the explorations are thought provoking and engaging.
You will emerge from the course with increased proficiency in Python programming, and with a broad spectrum of tools for algorithmic problem solving.

## Course Tools

**Piazza** class discussion forum

**PrairieLearn:** platform to help us give you feedback on work you do!

**GitHub:** code repository and version control

**Visual Studio Code:** developer environment

**Canvas:** basically just a place for you to find all the relevant links to things‚Ä¶

# Any questions before we continue?

# Break

{{< countdown minutes=5 >}}

## Tangrams

::: {layout="[35.7,5,59.3]" layout-valign="center"}
![](/images/tangram-square.png){fig-alt="The different geometric shapes of a tangram form a square."}

{{< iconify fa6-solid arrow-right size=2xl >}}

![](/images/tangram-house.png){fig-alt="The different geometric shapes of a tangram form a house"}
:::

## {{< var icon.computer-activity >}} Your turn: tangrams {.activity}

1.  Define a small working group of size up to 4.

2.  One of you share: <https://mathigon.org/tangram>

3.  Solve as many as you'd like, together

4.  Speculate together on why you're doing this!!

{{< countdown minutes=10 >}}

# Let's learn <br> {{< iconify fa6-brands markdown >}} Markdown

{{< countdown minutes=20 >}}

## {{< var icon.computer-activity >}} Your turn: time to practice Markdown! {.activity}

{{< countdown minutes=20 >}}

# The Magic Number for today <br> <br> \_\_\_\_\_\_ <br> <br> See you Thursday! {style="text-align: center;"}
