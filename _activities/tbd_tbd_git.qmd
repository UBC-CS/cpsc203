---
title: >
  {{< var icon.computer-activity >}} An introduction to Git
---

There were no slides for today's lecture.

```{=html}
<!--
Today we practiced a basic git workflow:
- Cloning a github repo.
- Multiple local edits with commits.
- Reviewing and merging pull requests.
-->
```

## Version Control with Git

![](/images/git.jpg)

-   Why Git?
-   The GitHub flow.
-   The evolution of version control, aka "why is git so complicated?"

```{=html}
<!--
- Introduction to Branches and Pull Requests (10 mins)
- Guided Activity 1: Intro to Git and GitHub (25 mins)
- Guided Activity 2: Code Reviews (10 mins)
- Git Summary and Review (15 mins)
-->
```

### Why Git

![](http://www.phdcomics.com/comics/archive/phd101212s.gif) \### What is Git?

![Image Source: [Noble Desktop](https://www.nobledesktop.com/blog/what-is-git-and-why-should-you-use-it)](https://www.nobledesktop.com/image/blog/git-branches-merge.png)

### Why is Git so complicated?

Each feature of Git is designed to solve particular issues that arise when managing versions of potentially large, distributed, and long-term projects, and understanding how to use Git may be made easier if you think about the issue you are trying to solve first.

```{=html}
<!--
*Ian needs to create a list / table outlining the common issues and which git command / workflow is used to resolve them.*
-->
```

## Learn Git Branching

![](/images/learn_git_branching.png)

```{=html}
<!--
## Guided Activity 1: Intro to Git and GitHub

You will need to get into a group of 3 for this activity, and it would be best if you all sat together.

- Contributor 1
- Contributor 2
- Contributor 3

### Tasks:
Tasks to be completed by all members unless otherwise specified.

- Get into groups of 3.
- *Contributor 1 only*: Create a new repository from the [Class Activity 6B]() template repository.
  - Follow the link.
  - Click on `Use this template`.
  - Choose yourself as the owner.
  - Create a new repository name.
  - Select *Public* repository (not Private).
- Clone the new repository onto local machines (using the terminal).
- Open the local repo in VS Code.
- Independently make changes to `functions.py` to fix *one* of the functions (based on which contributor you are) in VS Code.
- Commit changes to **local** repos.  **Do not push!!**
## Guided Activity 2: Code Reviews

We'll now do a demo on how to submit a Pull Request, and do a code review.
-->
```

## Useful Git Commands

Here are some command sequences that might be useful:

-   `git clone`
-   `git status`
-   `git switch`
-   `git add`, `git add .`, or `git add -A`
-   `git commit` or `git commit -m`
-   `git push`
-   `git pull`
-   `git fetch`
-   `git merge`
-   `git rebase`
-   `git branch`

## {{< var icon.resource >}} Resources

-   [GitHub Guide](https://github.com/git-guides)
-   [GitHub Flow cheatsheet](https://enterprise.github.com/downloads/en/github-flow-cheatsheet.pdf)
-   [Learn Git Branching](https://learngitbranching.js.org/)
