---
title: "{{< var icon.computer-activity >}} Review of Programming in Python I"
jupyter: python3
---

The material for this lecture is best experienced as a Jupyter Notebook.
Go to PrairieLearn [Class Activity 2A]({{< var course.prairielearn >}}/assessment/2495512) and open the workspace in the question there to get access to a cloud-based version of this notebook.

![Photo by [Christina Morillo](https://www.pexels.com/photo/two-women-sitting-on-sofa-holding-laptop-computers-1181268) from Pexels](/images/programming.jpg){fig-alt="Two women sitting on sofa holding laptop computers."}

**Note: Some images may look slightly different than yours as the software gets more polished and icons/user interfaces change, but this should give you a general gist of the essential things.**

![](/images/base.png)

![](/images/notebook1.png)

![](/images/notebook2.png)

![](/images/notebook3.png)

![](/images/notebook4.png)

![](/images/notebook5.png)

![](/images/notebook6.png)

## Part 1: Introduction (30 mins)

## Outline:

-   Part 1: Review of Python
    -   Basic datatypes
    -   Lists and tuples
    -   Break (5 min)
    -   String methods
    -   Dictionaries
    -   Conditionals

![](/images/bus_stop.jpg)

## Datatypes in Python

Python has several data types available.
The diagram below [from Geeks for Geeks](https://www.geeksforgeeks.org/python-data-types/) shows a nice summary of how the datatypes are classified, and examples of each.
You'll notice that some types are in a class of their own (`dict`, `set`, `bool`) whereas other ones are similar but have distinguishing features (`list`/`tuple`/`str` and `int`/`float` etc...).

![](https://media.geeksforgeeks.org/wp-content/uploads/20191023173512/Python-data-structure.jpg)

### Common built-in Python data types

| English name | Type name | Description | Example |
|:---|:---|:---|:---|
| integer | `int` | positive/negative whole numbers | `42` |
| floating point number | `float` | real number in decimal form | `3.14159` |
| boolean | `bool` | true or false | `True` |
| string | `str` | text | `"I Can Has Cheezburger?"` |
| list | `list` | a collection of objects - mutable & ordered | `['Ali','Xinyi','Miriam']` |
| tuple | `tuple` | a collection of objects - immutable & ordered | `('Thursday',6,9,2018)` |
| dictionary | `dict` | mapping of key-value pairs | `{'name':'DSCI','code':511,'credits':2}` |
| none | `NoneType` | represents no value | `None` |

### Variables and Values

-   A **value** is a piece of data that a computer program works with such as a number or text.

-   There are different **types** of values: `42` is an integer and `"Hello!"` is a string.

-   A **variable** is a name that refers to a value.

    -   In mathematics and statistics, we usually use variables names like $x$ and $y$.
    -   In Python, we can use any word as a variable name (as long as it starts with a letter and is not a [reserved word](https://docs.python.org/3.3/reference/lexical_analysis.html#keywords) in Python such as `for`, `while`, `class`, `lambda`, etc.).

-   And we use the **assignment operator** `=` to assign a value to a variable.

-   See the [Python 3 documentation](https://docs.python.org/3/library/stdtypes.html) for a summary of the standard built-in Python datatypes.

-   See [Think Python (Chapter 2)](http://greenteapress.com/thinkpython/html/thinkpython003.html) for a discussion of variables, expressions and statements in Python.

### Numeric Types

```{python}
x = 42.5
```

```{python}
type(x)
```

```{python}
x = 5
print(x)
```

```{python}
x=5
x-2
```

```{python}
pi = 3.14159
```

```{python}
print(pi)
```

```{python}
type(pi)
```

#### Arithmetic Operators

The syntax for the arithmetic operators are:

| Operator |   Description    |
|:--------:|:----------------:|
|   `+`    |     addition     |
|   `-`    |   subtraction    |
|   `*`    |  multiplication  |
|   `/`    |     division     |
|   `**`   |  exponentiation  |
|   `//`   | integer division |
|   `%`    |      modulo      |

Let's apply these operators to numeric types and observe the results.

```{python}
1 + 2 + 3 + 4 + 5
```

```{python}
0.1 + 0.2
```

::: callout-tip
From Firas: This is floating point arithmetic.
For an explanation of what's going on, [see this tutorial](https://docs.python.org/3/tutorial/floatingpoint.html).
:::

```{python}
2 * 3.14159
```

```{python}
2**10
```

```{python}
type(2**10)
```

```{python}
2.0**10
```

```{python}
int_2 = 2
```

```{python}
float_2 = 2.0
```

```{python}
float_2_again = 2.
```

```{python}
107 / 2
```

```{python}
107 // 2 # "integer division" - always rounds down
```

```{python}
101 % 2 # "101 mod 2", or the remainder when 101 is divided by 2
```

### Strings

-   Text is stored as a type called a string.
-   We think of a string as a sequence of characters.
-   We write strings as characters enclosed with either:
    -   single quotes, e.g., `'Hello'`
    -   double quotes, e.g., `"Goodbye"`
    -   triple single quotes, e.g., `'''Yesterday'''`
    -   triple double quotes, e.g., `"""Tomorrow"""`

```{python}
my_name = "Firas Moosvi"
```

```{python}
print(my_name)
```

```{python}
type(my_name)
```

```{python}
course = 'CPSC 203'
```

```{python}
print(course)
```

```{python}
type(course)
```

If the string contains a quotation or apostrophe, we can use double quotes or triple quotes to define the string.

```{python}
sentence = "It's a rainy day."
```

```{python}
print(sentence)
```

```{python}
type(sentence)
```

```{python}
saying = '''They say: 
"It's a rainy day!"'''
```

```{python}
print(saying)
```

### Sequence Type

This datatype contains three subtypes and serves as a good way to "hold/store stuff" - a container.

Each subtype has their own unique distinguishing features but they can all hold items of any type (and multiple types).

Below are the main differences between lists, tuples, and sets:

-   `list`: items are ordered, and **can** be edited, changed after insertion.
-   `set`: items are unique, but not ordered. Items cannot be replaced or changed, but can be removed or added.
-   `tuple`: items are ordered, but cannot be replaced or changed once created.

```{python}
mylist = ['one','two','apples','three','apples',600.50, 50, 'banana']
```

```{python}
set(mylist)
```

```{python}
mytuple = ('one','two','apples', 600.5)

mytuple
```

```{python}
mytuple +('blagreenck',)
```

#### Sets

-   Another built-in Python data type is the `set`, which stores an *un-ordered* list of *unique* items.

```{python}
s = {2,3,5,11}
s
```

```{python}
{1,2,3} == {3,2,1}
```

```{python}
[1,2,3] == [3,2,1]
```

```{python}
s.add(2) # does nothing
s
```

```{python}
#| error: true

s[0]
```

Above: throws an error because elements are not ordered.

### Boolean

-   The Boolean (`bool`) type has two values: `True` and `False`.

```{python}
the_truth = True
```

```{python}
print(the_truth)
```

```{python}
type(the_truth)
```

```{python}
lies = False
```

```{python}
print(lies)
```

```{python}
type(lies)
```

#### Comparison Operators

Compare objects using comparison operators.
The result is a Boolean value.

| Operator | Description                          |
|:--------:|:-------------------------------------|
| `x == y` | is `x` equal to `y`?                 |
| `x != y` | is `x` not equal to `y`?             |
| `x > y`  | is `x` greater than `y`?             |
| `x >= y` | is `x` greater than or equal to `y`? |
| `x < y`  | is `x` less than `y`?                |
| `x <= y` | is `x` less than or equal to `y`?    |
| `x is y` | is `x` the same object as `y`?       |

```{python}
2 < 3
```

```{python}
"Data Science" != "Deep Learning"
```

```{python}
2.0 == "two"
```

```{python}
2 == 2.0
```

Note: we will discuss `is` next week.

Operators on Boolean values.

| Operator  | Description                         |
|:---------:|:------------------------------------|
| `x and y` | are `x` and `y` both true?          |
| `x or y`  | is at least one of `x` or `y` true? |
|  `not x`  | is `x` false?                       |

```{python}
True and True
```

```{python}
True and False
```

```{python}
False or False
```

```{python}
("Python 2" != "Python 3") and (2 <= 3)
```

```{python}
not True
```

```{python}
not not True
```

### NoneType

-   `NoneType` is its own type in Python.
-   It only has one possible value, `None`
-   You may have seen similar things in other languages, like `null` in Java, etc.

```{python}
x = None
```

```{python}
print(x)
```

```{python}
type(x)
```

```{python}
bool(None)
```

### Dictionaries

Dictionaries are **awesome**!
We'll look at those in a lot more detail soon.

## Break!

## Dictionaries (10 min)

A dictionary is a mapping between key-values pairs.

```{python}
house = {'bedrooms': 3, 
         'bathrooms': 2, 
         'city': 'Vancouver', 
         'price': 2499999, 
         'date_sold': (1,3,2015)}

condo = {'bedrooms' : 2, 
         'bathrooms': 1, 
         'city'     : 'Burnaby', 
         'price'    : 699999, 
         'date_sold': (27,8,2011)
        }
```

```{python}
house
```

We can access a specific field of a dictionary with square brackets:

```{python}
house['price']
```

```{python}
condo['city']
```

We can also edit dictionaries (they are mutable):

```{python}
condo['price'] = 5 # price already in the dict
condo
```

```{python}
condo['flooring'] = "wood"
```

```{python}
condo
```

We can delete fields entirely (though I rarely use this):

```{python}
del condo["city"]
```

```{python}
condo
```

```{python}
condo[5] = 443345
```

```{python}
condo
```

```{python}
condo[(1,2,3)] = 777
condo
```

```{python}
#| error: true

condo["nothere"]
```

A sometimes useful trick about default values:

```{python}
condo["bedrooms"]
```

is shorthand for

```{python}
condo.get("bedrooms")
```

```{python}
type(condo.get('nothere'))
```

With this syntax you can also use default values:

```{python}
condo.get("bedrooms", "unknown")
```

```{python}
condo.get("fireplaces", "FREEZER")
```

-   A common operation is finding the maximum dictionary key by value.
-   There are a few ways to do this, see [this StackOverflow page](https://stackoverflow.com/questions/268272/getting-key-with-maximum-value-in-dictionary).
-   One way of doing it:

```{python}
#| error: true

max(word_lengths, key=word_lengths.get)
```

We saw `word_lengths.get` above - it is saying that we should call this function on each key of the dict to decide how to sort.

## Indexing Sequences (Lists and Tuples) (20 min)

-   Lists and tuples allow us to store multiple things ("elements") in a single object.
-   The elements are *ordered*.
-   We can access values inside a list, tuple, or string using the bracket syntax.
-   Python uses zero-based indexing, which means the first element of the list is in position 0, not position 1.

```{python}
my_list = [1, 2, "THREE", 4, 0.5]
```

```{python}
print(my_list)
```

```{python}
type(my_list)
```

You can get the length of the list with `len`:

```{python}
len(my_list)
```

```{python}
today = (1, 2, "THREE", 4, 0.5)
```

```{python}
print(today)
```

```{python}
type(today)
```

```{python}
len(today)
```

```{python}
my_list
```

```{python}
my_list[0]
```

```{python}
my_list[4]
```

```{python}
#| error: true

my_list[5]
```

```{python}
today[4]
```

We can use negative indices to count backwards from the end of the list.

```{python}
my_list
```

```{python}
my_list[-1]
```

We use the colon `:` to access a subsequence.
This is called "slicing".

```{python}
my_list[1:4]
```

-   Above: note that the start is inclusive and the end is exclusive.
-   So `my_list[1:3]` fetches elements 1 and 2, but not 3.
-   In other words, it gets the 2nd and 3rd elements in the list.

We can omit the start or end:

```{python}
my_list[:3]
```

```{python}
my_list[3:]
```

```{python}
my_list[:] # *almost* same as my_list - more details next week
```

Strings behave the same as lists and tuples when it comes to indexing and slicing.

```{python}
alphabet = "abcdefghijklmnopqrstuvwxyz"
```

```{python}
alphabet[0]
```

```{python}
alphabet[-1]
```

```{python}
alphabet[-3]
```

```{python}
alphabet[:5]
```

```{python}
alphabet[12:20]
```

### List Methods

-   A list is an object and it has methods for interacting with its data.
-   For example, `list.append(item)` appends an item to the end of the list.
-   See the documentation for more [list methods](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists).

```{python}
primes = [2,3,5,7,11]
primes
```

```{python}
len(primes)
```

```{python}
primes.append(13)
```

```{python}
primes
```

```{python}
len(primes)
```

```{python}
max(primes)
```

```{python}
min(primes)
```

```{python}
sum(primes)
```

```{python}
w =[1,2,3] + ["Hello", 7]
w
```

```{python}
type(w)
```

#### Mutable vs. Immutable Types

-   Strings and tuples are immutable types which means they cannot be modified.
-   Lists are mutable and we can assign new values for its various entries.
-   This is the main difference between lists and tuples.

```{python}
names_list = ["Indiana","Fang","Linsey"]
names_list
```

```{python}
names_list[0] = "Cool guy"
names_list
```

```{python}
names_tuple = ("Indiana","Fang","Linsey")
names_tuple
```

```{python}
#| error: true

names_tuple[0] = "Not cool guy"
```

Same goes for strings.
Once defined we cannot modifiy the characters of the string.

```{python}
my_name = "Firas"
```

```{python}
#| error: true

my_name[-1] = 'q'
```

```{python}
x = ([1,2,3],5)
```

```{python}
#| error: true

x[1] = 7
```

```{python}
x
```

```{python}
x[0][1] = 4
```

```{python}
x
```

## String Methods (5 min)

-   There are various useful string methods in Python.

```{python}
all_caps = "HOW ARE YOU TODAY?"
print(all_caps)
```

```{python}
new_str = all_caps.lower()
new_str
```

Note that the method lower doesn't change the original string but rather returns a new one.

```{python}
all_caps
```

There are *many* string methods.
Check out the [documentation](https://docs.python.org/3/library/stdtypes.html#string-methods).

```{python}
all_caps.split()
```

```{python}
all_caps.count("O")
```

One can explicitly cast a string to a list:

```{python}
caps_list = list(all_caps)
caps_list
```

```{python}
len(all_caps)
```

```{python}
len(caps_list)
```

#### String formatting

-   Python has a really awesome way of formatting strings by "filling in the blanks" and formatting them nicely.
-   There are a few ways of doing this, but [f-strings](https://realpython.com/python-f-strings/) are what I would recommend.

```{python}
myname = "Firas"
age = 5

new = f"Hello, my name is {myname}. I am {age} years old."

print(new)
```

#### Empties

```{python}
lst = list() # empty list
lst
```

```{python}
lst = [] # empty list
lst
```

```{python}
tup = tuple() # empty tuple
tup
```

```{python}
tup = () # empty tuple
tup
```

```{python}
dic = dict() # empty dict
dic
```

```{python}
dic = {} # empty dict
dic
```

```{python}
st = set() # emtpy set
st
```

```{python}
st = {} # NOT an empty set!
type(st)
```

```{python}
st = {1}
type(st)
```

## Conditionals (10 min)

-   [Conditional statements](https://docs.python.org/3/tutorial/controlflow.html) allow us to write programs where only certain blocks of code are executed depending on the state of the program.
-   Let's look at some examples and take note of the keywords, syntax and indentation.
-   Check out the [Python documentation](https://docs.python.org/3/tutorial/controlflow.html) and [Think Python (Chapter 5)](http://greenteapress.com/thinkpython/html/thinkpython006.html) for more information about conditional execution.

```{python}
#| eval: false

name = input("What's your name?")

if name.lower() == 'mike':
    print("That's my name too!")
elif name.lower() == 'santa':
    print("That's a funny name.")
elif name.lower() == 'firas':
    print("That's a great name")
else:
    print(f"Hello {name}! That's a cool name.")

    print('Nice to meet you!')
```

The main points to notice:

-   Use keywords `if`, `elif` and `else`
-   The colon `:` ends each conditional expression
-   Indentation (by 4 empty space) defines code blocks
-   In an `if` statement, the first block whose conditional statement returns `True` is executed and the program exits the `if` block
-   `if` statements don't necessarily need `elif` or `else`
-   `elif` lets us check several conditions
-   `else` lets us evaluate a default block if all other conditions are `False`
-   the end of the entire `if` statement is where the indentation returns to the same level as the first `if` keyword

If statements can also be **nested** inside of one another:

```{python}
#| eval: false

name = input("What's your name?")

if name.lower() == 'mike':
    print("That's my name too!")
elif name.lower() == 'santa':
    print("That's a funny name.")
else:
    print("Hello {0}! That's a cool name.".format(name))
    if name.lower().startswith("super"):
        print("Do you have superpowers?")

print('Nice to meet you!')
```

#### Inline if/else

```{python}
words = ["the", "list", "of", "words"]

x = "long list" if len(words) > 10 else "short list"
x
```

```{python}
if len(words) > 10:
    x = "long list"
else:
    x = "short list"
```

```{python}
x
```

## Preview: Next Class

Next class we will look at loops, functions, and error handling.
After that, we'll be in business for the rest of the course!
